#nowarn "67"

open System
open System.IO
open System.Diagnostics
open MetaLang.Service
open ModuleDefinition
open VersionDefinition
open CompilerDriverDefinition

let CurrentVersion = MetaLangVersion.ML1

let HandleArgs argv : unit =

    let compiler: CompilerInstance = CompilerInstance()
    let options: CompilerOptions = CompilerOptions()

    for arg in argv do

        match arg with
        | "-h" | "--help" -> 
            printfn "  -h | --help - Displays all commands and their purpose"
            printfn "  -v | --version - Outputs the compiler version"
            printfn "  -lang | --language - Outputs the maximum supported version of MetaLang by this compiler"
            printfn "  -token_trace - Outputs debugging information about tokenization"
            printfn "  -parser_trace - Outputs the tree generated by the parser"
            printfn "  -sema_trace - Debugging mode in semantic analysis"
            printfn "  -trace - Outputs all processing of compilation"

        | "-v" | "--version" -> 
            printfn "  Compiler MetaLang-1.0_pub"

        | "-lang" | "--language" -> 
            printfn "  Current version: %d" (int CurrentVersion)

        | "-token_trace" -> options.LexerTrace <- true
        | "-parser_trace" -> options.ParserTrace <- true
        | "-sema_trace" -> options.SemaTrace <- true

        | "-trace" -> 
            options.LexerTrace <- true
            options.ParserTrace <- true
            options.SemaTrace <- true

        | _ -> 

            let path: string = arg;

            let mutable source: string = ""
            try 
                source <- File.ReadAllText(path)
                
            with
                :? Exception as (excep: Exception) -> 
                    printfn "Error: %s No such file or directory" path

            let moduleInst: Module = Module(path, int CurrentVersion, source)

            compiler.Modules.Add(moduleInst)
            ()

    compiler.Options <- options
    compiler.CompileAllModules()

    for moduleInst in compiler.Modules do
        moduleInst.ThrowAllErrors()
    ()

[<EntryPoint>]
let Main argv =

    let stopwatch = Stopwatch()
    stopwatch.Start()

    if argv.Length = 0
    then
        printfn "\nusage: qlang [-OPTIONS-] [-SOURCES-] ..."
        printfn "  -h | --help - Displays all commands and their purpose"
        printfn "  -v | --version - Outputs the compiler version"
        printfn "  -lang | --language - Outputs the maximum supported version of MetaLang by this compiler"

        0
    else
        (HandleArgs argv) |> ignore

        stopwatch.Stop()
        let elapsed = stopwatch.Elapsed

        Console.ForegroundColor <- ConsoleColor.Green
        printf "\nTime has passed %O" elapsed

        Console.ResetColor()
        0